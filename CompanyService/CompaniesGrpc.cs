// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: companies.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Companies {
  /// <summary>
  ///  Companies service provides a simple gRPC API for retrieving information
  ///  regarding companies inside of Namely.
  /// </summary>
  public static class Companies
  {
    static readonly string __ServiceName = "companies.Companies";

    static readonly Marshaller<global::Companies.GetCompanyByPermalinkReq> __Marshaller_GetCompanyByPermalinkReq = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Companies.GetCompanyByPermalinkReq.Parser.ParseFrom);
    static readonly Marshaller<global::Companies.GetCompanyByPermalinkResp> __Marshaller_GetCompanyByPermalinkResp = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Companies.GetCompanyByPermalinkResp.Parser.ParseFrom);

    static readonly Method<global::Companies.GetCompanyByPermalinkReq, global::Companies.GetCompanyByPermalinkResp> __Method_GetCompanyByPermalink = new Method<global::Companies.GetCompanyByPermalinkReq, global::Companies.GetCompanyByPermalinkResp>(
        MethodType.Unary,
        __ServiceName,
        "GetCompanyByPermalink",
        __Marshaller_GetCompanyByPermalinkReq,
        __Marshaller_GetCompanyByPermalinkResp);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Companies.CompaniesReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Companies</summary>
    public abstract class CompaniesBase
    {
      /// <summary>
      ///  GetCompanyByPermalink returns a company based on the permalink provided,
      ///  if no company is found, then a NotFound grpc code is returned.
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Companies.GetCompanyByPermalinkResp> GetCompanyByPermalink(global::Companies.GetCompanyByPermalinkReq request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Companies</summary>
    public class CompaniesClient : ClientBase<CompaniesClient>
    {
      /// <summary>Creates a new client for Companies</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public CompaniesClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Companies that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public CompaniesClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected CompaniesClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected CompaniesClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///  GetCompanyByPermalink returns a company based on the permalink provided,
      ///  if no company is found, then a NotFound grpc code is returned.
      /// </summary>
      public virtual global::Companies.GetCompanyByPermalinkResp GetCompanyByPermalink(global::Companies.GetCompanyByPermalinkReq request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetCompanyByPermalink(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  GetCompanyByPermalink returns a company based on the permalink provided,
      ///  if no company is found, then a NotFound grpc code is returned.
      /// </summary>
      public virtual global::Companies.GetCompanyByPermalinkResp GetCompanyByPermalink(global::Companies.GetCompanyByPermalinkReq request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCompanyByPermalink, null, options, request);
      }
      /// <summary>
      ///  GetCompanyByPermalink returns a company based on the permalink provided,
      ///  if no company is found, then a NotFound grpc code is returned.
      /// </summary>
      public virtual AsyncUnaryCall<global::Companies.GetCompanyByPermalinkResp> GetCompanyByPermalinkAsync(global::Companies.GetCompanyByPermalinkReq request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetCompanyByPermalinkAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  GetCompanyByPermalink returns a company based on the permalink provided,
      ///  if no company is found, then a NotFound grpc code is returned.
      /// </summary>
      public virtual AsyncUnaryCall<global::Companies.GetCompanyByPermalinkResp> GetCompanyByPermalinkAsync(global::Companies.GetCompanyByPermalinkReq request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCompanyByPermalink, null, options, request);
      }
      protected override CompaniesClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new CompaniesClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(CompaniesBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetCompanyByPermalink, serviceImpl.GetCompanyByPermalink).Build();
    }

  }
}
#endregion
