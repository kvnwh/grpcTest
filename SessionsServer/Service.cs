// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Sessions {

  /// <summary>Holder for reflection information generated from service.proto</summary>
  public static partial class ServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for service.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1zZXJ2aWNlLnByb3RvEghzZXNzaW9ucyIlCgVFcnJvchILCgNrZXkYASAB",
            "KAkSDwoHbWVzc2FnZRgCIAEoCSL0AQoHU2Vzc2lvbhISCgpzZXNzaW9uX2lk",
            "GAEgASgJEhEKCXVzZXJfdXVpZBgCIAEoCRIpCgR2YXJzGAMgAygLMhsuc2Vz",
            "c2lvbnMuU2Vzc2lvbi5WYXJzRW50cnkSEgoKc3RhcnRlZF9hdBgEIAEoAxIS",
            "CgpleHBpcmVzX2F0GAUgASgDEhIKCmlwX2FkZHJlc3MYBiABKAkSEgoKdXNl",
            "cl9hZ2VudBgHIAEoCRIaChJoaWphY2tlcl91c2VyX3V1aWQYCCABKAkaKwoJ",
            "VmFyc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEiwAEK",
            "D1N0YXJ0U2Vzc2lvblJlcRIRCgl1c2VyX3V1aWQYASABKAkSEgoKZXhwaXJl",
            "c19hdBgCIAEoAxISCgppcF9hZGRyZXNzGAUgASgJEhIKCnVzZXJfYWdlbnQY",
            "BiABKAkSMQoEdmFycxgHIAMoCzIjLnNlc3Npb25zLlN0YXJ0U2Vzc2lvblJl",
            "cS5WYXJzRW50cnkaKwoJVmFyc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1",
            "ZRgCIAEoCToCOAEiYgoQU3RhcnRTZXNzaW9uUmVzcBIkCgdzZXNzaW9uGAEg",
            "ASgLMhEuc2Vzc2lvbnMuU2Vzc2lvbkgAEiAKBWVycm9yGAIgASgLMg8uc2Vz",
            "c2lvbnMuRXJyb3JIAEIGCgRyZXNwIiMKDUdldFNlc3Npb25SZXESEgoKc2Vz",
            "c2lvbl9pZBgBIAEoCSJgCg5HZXRTZXNzaW9uUmVzcBIkCgdzZXNzaW9uGAEg",
            "ASgLMhEuc2Vzc2lvbnMuU2Vzc2lvbkgAEiAKBWVycm9yGAIgASgLMg8uc2Vz",
            "c2lvbnMuRXJyb3JIAEIGCgRyZXNwIokBChFTZXRTZXNzaW9uVmFyc1JlcRIS",
            "CgpzZXNzaW9uX2lkGAEgASgJEjMKBHZhcnMYAyADKAsyJS5zZXNzaW9ucy5T",
            "ZXRTZXNzaW9uVmFyc1JlcS5WYXJzRW50cnkaKwoJVmFyc0VudHJ5EgsKA2tl",
            "eRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEiUQoSU2V0U2Vzc2lvblZhcnNS",
            "ZXNwEhEKB3N1Y2Nlc3MYASABKAhIABIgCgVlcnJvchgCIAEoCzIPLnNlc3Np",
            "b25zLkVycm9ySABCBgoEcmVzcCJWChFTZXRTZXNzaW9uVXNlclJlcRISCgpz",
            "ZXNzaW9uX2lkGAEgASgJEhEKCXVzZXJfdXVpZBgCIAEoCRIaChJoaWphY2tl",
            "cl91c2VyX3V1aWQYAyABKAkiUQoSU2V0U2Vzc2lvblVzZXJSZXNwEhEKB3N1",
            "Y2Nlc3MYASABKAhIABIgCgVlcnJvchgCIAEoCzIPLnNlc3Npb25zLkVycm9y",
            "SABCBgoEcmVzcCImChBFeHBpcmVTZXNzaW9uUmVxEhIKCnNlc3Npb25faWQY",
            "ASABKAkiUAoRRXhwaXJlU2Vzc2lvblJlc3ASEQoHc3VjY2VzcxgBIAEoCEgA",
            "EiAKBWVycm9yGAIgASgLMg8uc2Vzc2lvbnMuRXJyb3JIAEIGCgRyZXNwMoAD",
            "CghTZXNzaW9ucxJHCgxTdGFydFNlc3Npb24SGS5zZXNzaW9ucy5TdGFydFNl",
            "c3Npb25SZXEaGi5zZXNzaW9ucy5TdGFydFNlc3Npb25SZXNwIgASQQoKR2V0",
            "U2Vzc2lvbhIXLnNlc3Npb25zLkdldFNlc3Npb25SZXEaGC5zZXNzaW9ucy5H",
            "ZXRTZXNzaW9uUmVzcCIAEk0KDlNldFNlc3Npb25WYXJzEhsuc2Vzc2lvbnMu",
            "U2V0U2Vzc2lvblZhcnNSZXEaHC5zZXNzaW9ucy5TZXRTZXNzaW9uVmFyc1Jl",
            "c3AiABJNCg5TZXRTZXNzaW9uVXNlchIbLnNlc3Npb25zLlNldFNlc3Npb25V",
            "c2VyUmVxGhwuc2Vzc2lvbnMuU2V0U2Vzc2lvblVzZXJSZXNwIgASSgoNRXhw",
            "aXJlU2Vzc2lvbhIaLnNlc3Npb25zLkV4cGlyZVNlc3Npb25SZXEaGy5zZXNz",
            "aW9ucy5FeHBpcmVTZXNzaW9uUmVzcCIAYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Sessions.Error), global::Sessions.Error.Parser, new[]{ "Key", "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sessions.Session), global::Sessions.Session.Parser, new[]{ "SessionId", "UserUuid", "Vars", "StartedAt", "ExpiresAt", "IpAddress", "UserAgent", "HijackerUserUuid" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sessions.StartSessionReq), global::Sessions.StartSessionReq.Parser, new[]{ "UserUuid", "ExpiresAt", "IpAddress", "UserAgent", "Vars" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sessions.StartSessionResp), global::Sessions.StartSessionResp.Parser, new[]{ "Session", "Error" }, new[]{ "Resp" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sessions.GetSessionReq), global::Sessions.GetSessionReq.Parser, new[]{ "SessionId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sessions.GetSessionResp), global::Sessions.GetSessionResp.Parser, new[]{ "Session", "Error" }, new[]{ "Resp" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sessions.SetSessionVarsReq), global::Sessions.SetSessionVarsReq.Parser, new[]{ "SessionId", "Vars" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sessions.SetSessionVarsResp), global::Sessions.SetSessionVarsResp.Parser, new[]{ "Success", "Error" }, new[]{ "Resp" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sessions.SetSessionUserReq), global::Sessions.SetSessionUserReq.Parser, new[]{ "SessionId", "UserUuid", "HijackerUserUuid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sessions.SetSessionUserResp), global::Sessions.SetSessionUserResp.Parser, new[]{ "Success", "Error" }, new[]{ "Resp" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sessions.ExpireSessionReq), global::Sessions.ExpireSessionReq.Parser, new[]{ "SessionId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sessions.ExpireSessionResp), global::Sessions.ExpireSessionResp.Parser, new[]{ "Success", "Error" }, new[]{ "Resp" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Error : pb::IMessage<Error> {
    private static readonly pb::MessageParser<Error> _parser = new pb::MessageParser<Error>(() => new Error());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Error> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sessions.ServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error(Error other) : this() {
      key_ = other.key_;
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error Clone() {
      return new Error(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Error);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Error other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Error other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Session object represents a user session.
  /// </summary>
  public sealed partial class Session : pb::IMessage<Session> {
    private static readonly pb::MessageParser<Session> _parser = new pb::MessageParser<Session>(() => new Session());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Session> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sessions.ServiceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Session() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Session(Session other) : this() {
      sessionId_ = other.sessionId_;
      userUuid_ = other.userUuid_;
      vars_ = other.vars_.Clone();
      startedAt_ = other.startedAt_;
      expiresAt_ = other.expiresAt_;
      ipAddress_ = other.ipAddress_;
      userAgent_ = other.userAgent_;
      hijackerUserUuid_ = other.hijackerUserUuid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Session Clone() {
      return new Session(this);
    }

    /// <summary>Field number for the "session_id" field.</summary>
    public const int SessionIdFieldNumber = 1;
    private string sessionId_ = "";
    /// <summary>
    ///  session_id is the string id (generated by the service) of a session.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionId {
      get { return sessionId_; }
      set {
        sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_uuid" field.</summary>
    public const int UserUuidFieldNumber = 2;
    private string userUuid_ = "";
    /// <summary>
    ///  user_uuid connects the session to the user
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserUuid {
      get { return userUuid_; }
      set {
        userUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "vars" field.</summary>
    public const int VarsFieldNumber = 3;
    private static readonly pbc::MapField<string, string>.Codec _map_vars_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 26);
    private readonly pbc::MapField<string, string> vars_ = new pbc::MapField<string, string>();
    /// <summary>
    ///  vars contains session variables
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Vars {
      get { return vars_; }
    }

    /// <summary>Field number for the "started_at" field.</summary>
    public const int StartedAtFieldNumber = 4;
    private long startedAt_;
    /// <summary>
    ///  started is the unix timestamp when the session was started
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartedAt {
      get { return startedAt_; }
      set {
        startedAt_ = value;
      }
    }

    /// <summary>Field number for the "expires_at" field.</summary>
    public const int ExpiresAtFieldNumber = 5;
    private long expiresAt_;
    /// <summary>
    ///  expires_at is a unix timestamp (seconds since epoch)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExpiresAt {
      get { return expiresAt_; }
      set {
        expiresAt_ = value;
      }
    }

    /// <summary>Field number for the "ip_address" field.</summary>
    public const int IpAddressFieldNumber = 6;
    private string ipAddress_ = "";
    /// <summary>
    ///  ip address of the client
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IpAddress {
      get { return ipAddress_; }
      set {
        ipAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_agent" field.</summary>
    public const int UserAgentFieldNumber = 7;
    private string userAgent_ = "";
    /// <summary>
    ///  user agent of the client
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserAgent {
      get { return userAgent_; }
      set {
        userAgent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hijacker_user_uuid" field.</summary>
    public const int HijackerUserUuidFieldNumber = 8;
    private string hijackerUserUuid_ = "";
    /// <summary>
    ///  hijacker_user_uuid is the user which is assuming the current user
    ///  This is used when the administrator wants to see how a person sees a 
    ///  Namely site.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HijackerUserUuid {
      get { return hijackerUserUuid_; }
      set {
        hijackerUserUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Session);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Session other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SessionId != other.SessionId) return false;
      if (UserUuid != other.UserUuid) return false;
      if (!Vars.Equals(other.Vars)) return false;
      if (StartedAt != other.StartedAt) return false;
      if (ExpiresAt != other.ExpiresAt) return false;
      if (IpAddress != other.IpAddress) return false;
      if (UserAgent != other.UserAgent) return false;
      if (HijackerUserUuid != other.HijackerUserUuid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
      if (UserUuid.Length != 0) hash ^= UserUuid.GetHashCode();
      hash ^= Vars.GetHashCode();
      if (StartedAt != 0L) hash ^= StartedAt.GetHashCode();
      if (ExpiresAt != 0L) hash ^= ExpiresAt.GetHashCode();
      if (IpAddress.Length != 0) hash ^= IpAddress.GetHashCode();
      if (UserAgent.Length != 0) hash ^= UserAgent.GetHashCode();
      if (HijackerUserUuid.Length != 0) hash ^= HijackerUserUuid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SessionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SessionId);
      }
      if (UserUuid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserUuid);
      }
      vars_.WriteTo(output, _map_vars_codec);
      if (StartedAt != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(StartedAt);
      }
      if (ExpiresAt != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(ExpiresAt);
      }
      if (IpAddress.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(IpAddress);
      }
      if (UserAgent.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(UserAgent);
      }
      if (HijackerUserUuid.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(HijackerUserUuid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SessionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
      }
      if (UserUuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserUuid);
      }
      size += vars_.CalculateSize(_map_vars_codec);
      if (StartedAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartedAt);
      }
      if (ExpiresAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpiresAt);
      }
      if (IpAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IpAddress);
      }
      if (UserAgent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserAgent);
      }
      if (HijackerUserUuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HijackerUserUuid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Session other) {
      if (other == null) {
        return;
      }
      if (other.SessionId.Length != 0) {
        SessionId = other.SessionId;
      }
      if (other.UserUuid.Length != 0) {
        UserUuid = other.UserUuid;
      }
      vars_.Add(other.vars_);
      if (other.StartedAt != 0L) {
        StartedAt = other.StartedAt;
      }
      if (other.ExpiresAt != 0L) {
        ExpiresAt = other.ExpiresAt;
      }
      if (other.IpAddress.Length != 0) {
        IpAddress = other.IpAddress;
      }
      if (other.UserAgent.Length != 0) {
        UserAgent = other.UserAgent;
      }
      if (other.HijackerUserUuid.Length != 0) {
        HijackerUserUuid = other.HijackerUserUuid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SessionId = input.ReadString();
            break;
          }
          case 18: {
            UserUuid = input.ReadString();
            break;
          }
          case 26: {
            vars_.AddEntriesFrom(input, _map_vars_codec);
            break;
          }
          case 32: {
            StartedAt = input.ReadInt64();
            break;
          }
          case 40: {
            ExpiresAt = input.ReadInt64();
            break;
          }
          case 50: {
            IpAddress = input.ReadString();
            break;
          }
          case 58: {
            UserAgent = input.ReadString();
            break;
          }
          case 66: {
            HijackerUserUuid = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StartSessionReq : pb::IMessage<StartSessionReq> {
    private static readonly pb::MessageParser<StartSessionReq> _parser = new pb::MessageParser<StartSessionReq>(() => new StartSessionReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartSessionReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sessions.ServiceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartSessionReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartSessionReq(StartSessionReq other) : this() {
      userUuid_ = other.userUuid_;
      expiresAt_ = other.expiresAt_;
      ipAddress_ = other.ipAddress_;
      userAgent_ = other.userAgent_;
      vars_ = other.vars_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartSessionReq Clone() {
      return new StartSessionReq(this);
    }

    /// <summary>Field number for the "user_uuid" field.</summary>
    public const int UserUuidFieldNumber = 1;
    private string userUuid_ = "";
    /// <summary>
    ///  user_uuid connects the session to the user
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserUuid {
      get { return userUuid_; }
      set {
        userUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "expires_at" field.</summary>
    public const int ExpiresAtFieldNumber = 2;
    private long expiresAt_;
    /// <summary>
    ///  expires_at (optional) is a unix timestamp (seconds since epoch)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExpiresAt {
      get { return expiresAt_; }
      set {
        expiresAt_ = value;
      }
    }

    /// <summary>Field number for the "ip_address" field.</summary>
    public const int IpAddressFieldNumber = 5;
    private string ipAddress_ = "";
    /// <summary>
    ///  ip address of the client
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IpAddress {
      get { return ipAddress_; }
      set {
        ipAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_agent" field.</summary>
    public const int UserAgentFieldNumber = 6;
    private string userAgent_ = "";
    /// <summary>
    ///  user agent of the client
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserAgent {
      get { return userAgent_; }
      set {
        userAgent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "vars" field.</summary>
    public const int VarsFieldNumber = 7;
    private static readonly pbc::MapField<string, string>.Codec _map_vars_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 58);
    private readonly pbc::MapField<string, string> vars_ = new pbc::MapField<string, string>();
    /// <summary>
    ///  vars contains session variables
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Vars {
      get { return vars_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartSessionReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartSessionReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserUuid != other.UserUuid) return false;
      if (ExpiresAt != other.ExpiresAt) return false;
      if (IpAddress != other.IpAddress) return false;
      if (UserAgent != other.UserAgent) return false;
      if (!Vars.Equals(other.Vars)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserUuid.Length != 0) hash ^= UserUuid.GetHashCode();
      if (ExpiresAt != 0L) hash ^= ExpiresAt.GetHashCode();
      if (IpAddress.Length != 0) hash ^= IpAddress.GetHashCode();
      if (UserAgent.Length != 0) hash ^= UserAgent.GetHashCode();
      hash ^= Vars.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserUuid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserUuid);
      }
      if (ExpiresAt != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ExpiresAt);
      }
      if (IpAddress.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(IpAddress);
      }
      if (UserAgent.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(UserAgent);
      }
      vars_.WriteTo(output, _map_vars_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserUuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserUuid);
      }
      if (ExpiresAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpiresAt);
      }
      if (IpAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IpAddress);
      }
      if (UserAgent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserAgent);
      }
      size += vars_.CalculateSize(_map_vars_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartSessionReq other) {
      if (other == null) {
        return;
      }
      if (other.UserUuid.Length != 0) {
        UserUuid = other.UserUuid;
      }
      if (other.ExpiresAt != 0L) {
        ExpiresAt = other.ExpiresAt;
      }
      if (other.IpAddress.Length != 0) {
        IpAddress = other.IpAddress;
      }
      if (other.UserAgent.Length != 0) {
        UserAgent = other.UserAgent;
      }
      vars_.Add(other.vars_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserUuid = input.ReadString();
            break;
          }
          case 16: {
            ExpiresAt = input.ReadInt64();
            break;
          }
          case 42: {
            IpAddress = input.ReadString();
            break;
          }
          case 50: {
            UserAgent = input.ReadString();
            break;
          }
          case 58: {
            vars_.AddEntriesFrom(input, _map_vars_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StartSessionResp : pb::IMessage<StartSessionResp> {
    private static readonly pb::MessageParser<StartSessionResp> _parser = new pb::MessageParser<StartSessionResp>(() => new StartSessionResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartSessionResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sessions.ServiceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartSessionResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartSessionResp(StartSessionResp other) : this() {
      switch (other.RespCase) {
        case RespOneofCase.Session:
          Session = other.Session.Clone();
          break;
        case RespOneofCase.Error:
          Error = other.Error.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartSessionResp Clone() {
      return new StartSessionResp(this);
    }

    /// <summary>Field number for the "session" field.</summary>
    public const int SessionFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sessions.Session Session {
      get { return respCase_ == RespOneofCase.Session ? (global::Sessions.Session) resp_ : null; }
      set {
        resp_ = value;
        respCase_ = value == null ? RespOneofCase.None : RespOneofCase.Session;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sessions.Error Error {
      get { return respCase_ == RespOneofCase.Error ? (global::Sessions.Error) resp_ : null; }
      set {
        resp_ = value;
        respCase_ = value == null ? RespOneofCase.None : RespOneofCase.Error;
      }
    }

    private object resp_;
    /// <summary>Enum of possible cases for the "resp" oneof.</summary>
    public enum RespOneofCase {
      None = 0,
      Session = 1,
      Error = 2,
    }
    private RespOneofCase respCase_ = RespOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RespOneofCase RespCase {
      get { return respCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResp() {
      respCase_ = RespOneofCase.None;
      resp_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartSessionResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartSessionResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Session, other.Session)) return false;
      if (!object.Equals(Error, other.Error)) return false;
      if (RespCase != other.RespCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (respCase_ == RespOneofCase.Session) hash ^= Session.GetHashCode();
      if (respCase_ == RespOneofCase.Error) hash ^= Error.GetHashCode();
      hash ^= (int) respCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (respCase_ == RespOneofCase.Session) {
        output.WriteRawTag(10);
        output.WriteMessage(Session);
      }
      if (respCase_ == RespOneofCase.Error) {
        output.WriteRawTag(18);
        output.WriteMessage(Error);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (respCase_ == RespOneofCase.Session) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Session);
      }
      if (respCase_ == RespOneofCase.Error) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartSessionResp other) {
      if (other == null) {
        return;
      }
      switch (other.RespCase) {
        case RespOneofCase.Session:
          Session = other.Session;
          break;
        case RespOneofCase.Error:
          Error = other.Error;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Sessions.Session subBuilder = new global::Sessions.Session();
            if (respCase_ == RespOneofCase.Session) {
              subBuilder.MergeFrom(Session);
            }
            input.ReadMessage(subBuilder);
            Session = subBuilder;
            break;
          }
          case 18: {
            global::Sessions.Error subBuilder = new global::Sessions.Error();
            if (respCase_ == RespOneofCase.Error) {
              subBuilder.MergeFrom(Error);
            }
            input.ReadMessage(subBuilder);
            Error = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetSessionReq : pb::IMessage<GetSessionReq> {
    private static readonly pb::MessageParser<GetSessionReq> _parser = new pb::MessageParser<GetSessionReq>(() => new GetSessionReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetSessionReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sessions.ServiceReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSessionReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSessionReq(GetSessionReq other) : this() {
      sessionId_ = other.sessionId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSessionReq Clone() {
      return new GetSessionReq(this);
    }

    /// <summary>Field number for the "session_id" field.</summary>
    public const int SessionIdFieldNumber = 1;
    private string sessionId_ = "";
    /// <summary>
    ///  session_id is the string id of a session
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionId {
      get { return sessionId_; }
      set {
        sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetSessionReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetSessionReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SessionId != other.SessionId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SessionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SessionId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SessionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetSessionReq other) {
      if (other == null) {
        return;
      }
      if (other.SessionId.Length != 0) {
        SessionId = other.SessionId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SessionId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  GetSessionResp contains the session or an error
  ///  Expected errors:
  ///  - not_found: Session was not found
  ///  - expired: Session was expired
  /// </summary>
  public sealed partial class GetSessionResp : pb::IMessage<GetSessionResp> {
    private static readonly pb::MessageParser<GetSessionResp> _parser = new pb::MessageParser<GetSessionResp>(() => new GetSessionResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetSessionResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sessions.ServiceReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSessionResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSessionResp(GetSessionResp other) : this() {
      switch (other.RespCase) {
        case RespOneofCase.Session:
          Session = other.Session.Clone();
          break;
        case RespOneofCase.Error:
          Error = other.Error.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSessionResp Clone() {
      return new GetSessionResp(this);
    }

    /// <summary>Field number for the "session" field.</summary>
    public const int SessionFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sessions.Session Session {
      get { return respCase_ == RespOneofCase.Session ? (global::Sessions.Session) resp_ : null; }
      set {
        resp_ = value;
        respCase_ = value == null ? RespOneofCase.None : RespOneofCase.Session;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sessions.Error Error {
      get { return respCase_ == RespOneofCase.Error ? (global::Sessions.Error) resp_ : null; }
      set {
        resp_ = value;
        respCase_ = value == null ? RespOneofCase.None : RespOneofCase.Error;
      }
    }

    private object resp_;
    /// <summary>Enum of possible cases for the "resp" oneof.</summary>
    public enum RespOneofCase {
      None = 0,
      Session = 1,
      Error = 2,
    }
    private RespOneofCase respCase_ = RespOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RespOneofCase RespCase {
      get { return respCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResp() {
      respCase_ = RespOneofCase.None;
      resp_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetSessionResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetSessionResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Session, other.Session)) return false;
      if (!object.Equals(Error, other.Error)) return false;
      if (RespCase != other.RespCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (respCase_ == RespOneofCase.Session) hash ^= Session.GetHashCode();
      if (respCase_ == RespOneofCase.Error) hash ^= Error.GetHashCode();
      hash ^= (int) respCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (respCase_ == RespOneofCase.Session) {
        output.WriteRawTag(10);
        output.WriteMessage(Session);
      }
      if (respCase_ == RespOneofCase.Error) {
        output.WriteRawTag(18);
        output.WriteMessage(Error);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (respCase_ == RespOneofCase.Session) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Session);
      }
      if (respCase_ == RespOneofCase.Error) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetSessionResp other) {
      if (other == null) {
        return;
      }
      switch (other.RespCase) {
        case RespOneofCase.Session:
          Session = other.Session;
          break;
        case RespOneofCase.Error:
          Error = other.Error;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Sessions.Session subBuilder = new global::Sessions.Session();
            if (respCase_ == RespOneofCase.Session) {
              subBuilder.MergeFrom(Session);
            }
            input.ReadMessage(subBuilder);
            Session = subBuilder;
            break;
          }
          case 18: {
            global::Sessions.Error subBuilder = new global::Sessions.Error();
            if (respCase_ == RespOneofCase.Error) {
              subBuilder.MergeFrom(Error);
            }
            input.ReadMessage(subBuilder);
            Error = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetSessionVarsReq : pb::IMessage<SetSessionVarsReq> {
    private static readonly pb::MessageParser<SetSessionVarsReq> _parser = new pb::MessageParser<SetSessionVarsReq>(() => new SetSessionVarsReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetSessionVarsReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sessions.ServiceReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetSessionVarsReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetSessionVarsReq(SetSessionVarsReq other) : this() {
      sessionId_ = other.sessionId_;
      vars_ = other.vars_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetSessionVarsReq Clone() {
      return new SetSessionVarsReq(this);
    }

    /// <summary>Field number for the "session_id" field.</summary>
    public const int SessionIdFieldNumber = 1;
    private string sessionId_ = "";
    /// <summary>
    ///  session_id is the string id of a session
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionId {
      get { return sessionId_; }
      set {
        sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "vars" field.</summary>
    public const int VarsFieldNumber = 3;
    private static readonly pbc::MapField<string, string>.Codec _map_vars_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 26);
    private readonly pbc::MapField<string, string> vars_ = new pbc::MapField<string, string>();
    /// <summary>
    ///  vars contains session variables
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Vars {
      get { return vars_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetSessionVarsReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetSessionVarsReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SessionId != other.SessionId) return false;
      if (!Vars.Equals(other.Vars)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
      hash ^= Vars.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SessionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SessionId);
      }
      vars_.WriteTo(output, _map_vars_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SessionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
      }
      size += vars_.CalculateSize(_map_vars_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetSessionVarsReq other) {
      if (other == null) {
        return;
      }
      if (other.SessionId.Length != 0) {
        SessionId = other.SessionId;
      }
      vars_.Add(other.vars_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SessionId = input.ReadString();
            break;
          }
          case 26: {
            vars_.AddEntriesFrom(input, _map_vars_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  SetSessionVarsResp contains a success flag or an error
  ///  Expected errors:
  ///  - not_found: Session was not found
  ///  - expired: Session was expired
  /// </summary>
  public sealed partial class SetSessionVarsResp : pb::IMessage<SetSessionVarsResp> {
    private static readonly pb::MessageParser<SetSessionVarsResp> _parser = new pb::MessageParser<SetSessionVarsResp>(() => new SetSessionVarsResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetSessionVarsResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sessions.ServiceReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetSessionVarsResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetSessionVarsResp(SetSessionVarsResp other) : this() {
      switch (other.RespCase) {
        case RespOneofCase.Success:
          Success = other.Success;
          break;
        case RespOneofCase.Error:
          Error = other.Error.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetSessionVarsResp Clone() {
      return new SetSessionVarsResp(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return respCase_ == RespOneofCase.Success ? (bool) resp_ : false; }
      set {
        resp_ = value;
        respCase_ = RespOneofCase.Success;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sessions.Error Error {
      get { return respCase_ == RespOneofCase.Error ? (global::Sessions.Error) resp_ : null; }
      set {
        resp_ = value;
        respCase_ = value == null ? RespOneofCase.None : RespOneofCase.Error;
      }
    }

    private object resp_;
    /// <summary>Enum of possible cases for the "resp" oneof.</summary>
    public enum RespOneofCase {
      None = 0,
      Success = 1,
      Error = 2,
    }
    private RespOneofCase respCase_ = RespOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RespOneofCase RespCase {
      get { return respCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResp() {
      respCase_ = RespOneofCase.None;
      resp_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetSessionVarsResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetSessionVarsResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (!object.Equals(Error, other.Error)) return false;
      if (RespCase != other.RespCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (respCase_ == RespOneofCase.Success) hash ^= Success.GetHashCode();
      if (respCase_ == RespOneofCase.Error) hash ^= Error.GetHashCode();
      hash ^= (int) respCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (respCase_ == RespOneofCase.Success) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (respCase_ == RespOneofCase.Error) {
        output.WriteRawTag(18);
        output.WriteMessage(Error);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (respCase_ == RespOneofCase.Success) {
        size += 1 + 1;
      }
      if (respCase_ == RespOneofCase.Error) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetSessionVarsResp other) {
      if (other == null) {
        return;
      }
      switch (other.RespCase) {
        case RespOneofCase.Success:
          Success = other.Success;
          break;
        case RespOneofCase.Error:
          Error = other.Error;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            global::Sessions.Error subBuilder = new global::Sessions.Error();
            if (respCase_ == RespOneofCase.Error) {
              subBuilder.MergeFrom(Error);
            }
            input.ReadMessage(subBuilder);
            Error = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetSessionUserReq : pb::IMessage<SetSessionUserReq> {
    private static readonly pb::MessageParser<SetSessionUserReq> _parser = new pb::MessageParser<SetSessionUserReq>(() => new SetSessionUserReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetSessionUserReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sessions.ServiceReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetSessionUserReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetSessionUserReq(SetSessionUserReq other) : this() {
      sessionId_ = other.sessionId_;
      userUuid_ = other.userUuid_;
      hijackerUserUuid_ = other.hijackerUserUuid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetSessionUserReq Clone() {
      return new SetSessionUserReq(this);
    }

    /// <summary>Field number for the "session_id" field.</summary>
    public const int SessionIdFieldNumber = 1;
    private string sessionId_ = "";
    /// <summary>
    ///  session_id is the string id of a session
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionId {
      get { return sessionId_; }
      set {
        sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_uuid" field.</summary>
    public const int UserUuidFieldNumber = 2;
    private string userUuid_ = "";
    /// <summary>
    ///  user_uuid identifies the user
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserUuid {
      get { return userUuid_; }
      set {
        userUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hijacker_user_uuid" field.</summary>
    public const int HijackerUserUuidFieldNumber = 3;
    private string hijackerUserUuid_ = "";
    /// <summary>
    ///  hijacker_user_uuid is the user which is assuming the current user
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HijackerUserUuid {
      get { return hijackerUserUuid_; }
      set {
        hijackerUserUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetSessionUserReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetSessionUserReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SessionId != other.SessionId) return false;
      if (UserUuid != other.UserUuid) return false;
      if (HijackerUserUuid != other.HijackerUserUuid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
      if (UserUuid.Length != 0) hash ^= UserUuid.GetHashCode();
      if (HijackerUserUuid.Length != 0) hash ^= HijackerUserUuid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SessionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SessionId);
      }
      if (UserUuid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserUuid);
      }
      if (HijackerUserUuid.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(HijackerUserUuid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SessionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
      }
      if (UserUuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserUuid);
      }
      if (HijackerUserUuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HijackerUserUuid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetSessionUserReq other) {
      if (other == null) {
        return;
      }
      if (other.SessionId.Length != 0) {
        SessionId = other.SessionId;
      }
      if (other.UserUuid.Length != 0) {
        UserUuid = other.UserUuid;
      }
      if (other.HijackerUserUuid.Length != 0) {
        HijackerUserUuid = other.HijackerUserUuid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SessionId = input.ReadString();
            break;
          }
          case 18: {
            UserUuid = input.ReadString();
            break;
          }
          case 26: {
            HijackerUserUuid = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  SetSessionUserResp contains a success flag or an error
  ///  Expected errors:
  ///  - not_found: Session was not found
  ///  - expired: Session was expired
  /// </summary>
  public sealed partial class SetSessionUserResp : pb::IMessage<SetSessionUserResp> {
    private static readonly pb::MessageParser<SetSessionUserResp> _parser = new pb::MessageParser<SetSessionUserResp>(() => new SetSessionUserResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetSessionUserResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sessions.ServiceReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetSessionUserResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetSessionUserResp(SetSessionUserResp other) : this() {
      switch (other.RespCase) {
        case RespOneofCase.Success:
          Success = other.Success;
          break;
        case RespOneofCase.Error:
          Error = other.Error.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetSessionUserResp Clone() {
      return new SetSessionUserResp(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return respCase_ == RespOneofCase.Success ? (bool) resp_ : false; }
      set {
        resp_ = value;
        respCase_ = RespOneofCase.Success;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sessions.Error Error {
      get { return respCase_ == RespOneofCase.Error ? (global::Sessions.Error) resp_ : null; }
      set {
        resp_ = value;
        respCase_ = value == null ? RespOneofCase.None : RespOneofCase.Error;
      }
    }

    private object resp_;
    /// <summary>Enum of possible cases for the "resp" oneof.</summary>
    public enum RespOneofCase {
      None = 0,
      Success = 1,
      Error = 2,
    }
    private RespOneofCase respCase_ = RespOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RespOneofCase RespCase {
      get { return respCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResp() {
      respCase_ = RespOneofCase.None;
      resp_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetSessionUserResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetSessionUserResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (!object.Equals(Error, other.Error)) return false;
      if (RespCase != other.RespCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (respCase_ == RespOneofCase.Success) hash ^= Success.GetHashCode();
      if (respCase_ == RespOneofCase.Error) hash ^= Error.GetHashCode();
      hash ^= (int) respCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (respCase_ == RespOneofCase.Success) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (respCase_ == RespOneofCase.Error) {
        output.WriteRawTag(18);
        output.WriteMessage(Error);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (respCase_ == RespOneofCase.Success) {
        size += 1 + 1;
      }
      if (respCase_ == RespOneofCase.Error) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetSessionUserResp other) {
      if (other == null) {
        return;
      }
      switch (other.RespCase) {
        case RespOneofCase.Success:
          Success = other.Success;
          break;
        case RespOneofCase.Error:
          Error = other.Error;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            global::Sessions.Error subBuilder = new global::Sessions.Error();
            if (respCase_ == RespOneofCase.Error) {
              subBuilder.MergeFrom(Error);
            }
            input.ReadMessage(subBuilder);
            Error = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  ExpireSession explicitly expires a session
  /// </summary>
  public sealed partial class ExpireSessionReq : pb::IMessage<ExpireSessionReq> {
    private static readonly pb::MessageParser<ExpireSessionReq> _parser = new pb::MessageParser<ExpireSessionReq>(() => new ExpireSessionReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExpireSessionReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sessions.ServiceReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExpireSessionReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExpireSessionReq(ExpireSessionReq other) : this() {
      sessionId_ = other.sessionId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExpireSessionReq Clone() {
      return new ExpireSessionReq(this);
    }

    /// <summary>Field number for the "session_id" field.</summary>
    public const int SessionIdFieldNumber = 1;
    private string sessionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionId {
      get { return sessionId_; }
      set {
        sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExpireSessionReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExpireSessionReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SessionId != other.SessionId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SessionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SessionId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SessionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExpireSessionReq other) {
      if (other == null) {
        return;
      }
      if (other.SessionId.Length != 0) {
        SessionId = other.SessionId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SessionId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  ExpireSessionResp contains a success flag or an error
  ///  Expected errors:
  ///  - not_found: Session was not found
  ///  - expired: Session was expired
  /// </summary>
  public sealed partial class ExpireSessionResp : pb::IMessage<ExpireSessionResp> {
    private static readonly pb::MessageParser<ExpireSessionResp> _parser = new pb::MessageParser<ExpireSessionResp>(() => new ExpireSessionResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExpireSessionResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sessions.ServiceReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExpireSessionResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExpireSessionResp(ExpireSessionResp other) : this() {
      switch (other.RespCase) {
        case RespOneofCase.Success:
          Success = other.Success;
          break;
        case RespOneofCase.Error:
          Error = other.Error.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExpireSessionResp Clone() {
      return new ExpireSessionResp(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return respCase_ == RespOneofCase.Success ? (bool) resp_ : false; }
      set {
        resp_ = value;
        respCase_ = RespOneofCase.Success;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sessions.Error Error {
      get { return respCase_ == RespOneofCase.Error ? (global::Sessions.Error) resp_ : null; }
      set {
        resp_ = value;
        respCase_ = value == null ? RespOneofCase.None : RespOneofCase.Error;
      }
    }

    private object resp_;
    /// <summary>Enum of possible cases for the "resp" oneof.</summary>
    public enum RespOneofCase {
      None = 0,
      Success = 1,
      Error = 2,
    }
    private RespOneofCase respCase_ = RespOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RespOneofCase RespCase {
      get { return respCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResp() {
      respCase_ = RespOneofCase.None;
      resp_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExpireSessionResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExpireSessionResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (!object.Equals(Error, other.Error)) return false;
      if (RespCase != other.RespCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (respCase_ == RespOneofCase.Success) hash ^= Success.GetHashCode();
      if (respCase_ == RespOneofCase.Error) hash ^= Error.GetHashCode();
      hash ^= (int) respCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (respCase_ == RespOneofCase.Success) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (respCase_ == RespOneofCase.Error) {
        output.WriteRawTag(18);
        output.WriteMessage(Error);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (respCase_ == RespOneofCase.Success) {
        size += 1 + 1;
      }
      if (respCase_ == RespOneofCase.Error) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExpireSessionResp other) {
      if (other == null) {
        return;
      }
      switch (other.RespCase) {
        case RespOneofCase.Success:
          Success = other.Success;
          break;
        case RespOneofCase.Error:
          Error = other.Error;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            global::Sessions.Error subBuilder = new global::Sessions.Error();
            if (respCase_ == RespOneofCase.Error) {
              subBuilder.MergeFrom(Error);
            }
            input.ReadMessage(subBuilder);
            Error = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
