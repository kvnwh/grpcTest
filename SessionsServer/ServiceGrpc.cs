// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Sessions {
  public static class Sessions
  {
    static readonly string __ServiceName = "sessions.Sessions";

    static readonly Marshaller<global::Sessions.StartSessionReq> __Marshaller_StartSessionReq = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sessions.StartSessionReq.Parser.ParseFrom);
    static readonly Marshaller<global::Sessions.StartSessionResp> __Marshaller_StartSessionResp = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sessions.StartSessionResp.Parser.ParseFrom);
    static readonly Marshaller<global::Sessions.GetSessionReq> __Marshaller_GetSessionReq = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sessions.GetSessionReq.Parser.ParseFrom);
    static readonly Marshaller<global::Sessions.GetSessionResp> __Marshaller_GetSessionResp = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sessions.GetSessionResp.Parser.ParseFrom);
    static readonly Marshaller<global::Sessions.SetSessionVarsReq> __Marshaller_SetSessionVarsReq = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sessions.SetSessionVarsReq.Parser.ParseFrom);
    static readonly Marshaller<global::Sessions.SetSessionVarsResp> __Marshaller_SetSessionVarsResp = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sessions.SetSessionVarsResp.Parser.ParseFrom);
    static readonly Marshaller<global::Sessions.SetSessionUserReq> __Marshaller_SetSessionUserReq = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sessions.SetSessionUserReq.Parser.ParseFrom);
    static readonly Marshaller<global::Sessions.SetSessionUserResp> __Marshaller_SetSessionUserResp = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sessions.SetSessionUserResp.Parser.ParseFrom);
    static readonly Marshaller<global::Sessions.ExpireSessionReq> __Marshaller_ExpireSessionReq = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sessions.ExpireSessionReq.Parser.ParseFrom);
    static readonly Marshaller<global::Sessions.ExpireSessionResp> __Marshaller_ExpireSessionResp = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sessions.ExpireSessionResp.Parser.ParseFrom);

    static readonly Method<global::Sessions.StartSessionReq, global::Sessions.StartSessionResp> __Method_StartSession = new Method<global::Sessions.StartSessionReq, global::Sessions.StartSessionResp>(
        MethodType.Unary,
        __ServiceName,
        "StartSession",
        __Marshaller_StartSessionReq,
        __Marshaller_StartSessionResp);

    static readonly Method<global::Sessions.GetSessionReq, global::Sessions.GetSessionResp> __Method_GetSession = new Method<global::Sessions.GetSessionReq, global::Sessions.GetSessionResp>(
        MethodType.Unary,
        __ServiceName,
        "GetSession",
        __Marshaller_GetSessionReq,
        __Marshaller_GetSessionResp);

    static readonly Method<global::Sessions.SetSessionVarsReq, global::Sessions.SetSessionVarsResp> __Method_SetSessionVars = new Method<global::Sessions.SetSessionVarsReq, global::Sessions.SetSessionVarsResp>(
        MethodType.Unary,
        __ServiceName,
        "SetSessionVars",
        __Marshaller_SetSessionVarsReq,
        __Marshaller_SetSessionVarsResp);

    static readonly Method<global::Sessions.SetSessionUserReq, global::Sessions.SetSessionUserResp> __Method_SetSessionUser = new Method<global::Sessions.SetSessionUserReq, global::Sessions.SetSessionUserResp>(
        MethodType.Unary,
        __ServiceName,
        "SetSessionUser",
        __Marshaller_SetSessionUserReq,
        __Marshaller_SetSessionUserResp);

    static readonly Method<global::Sessions.ExpireSessionReq, global::Sessions.ExpireSessionResp> __Method_ExpireSession = new Method<global::Sessions.ExpireSessionReq, global::Sessions.ExpireSessionResp>(
        MethodType.Unary,
        __ServiceName,
        "ExpireSession",
        __Marshaller_ExpireSessionReq,
        __Marshaller_ExpireSessionResp);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Sessions.ServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Sessions</summary>
    public abstract class SessionsBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Sessions.StartSessionResp> StartSession(global::Sessions.StartSessionReq request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Sessions.GetSessionResp> GetSession(global::Sessions.GetSessionReq request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Sessions.SetSessionVarsResp> SetSessionVars(global::Sessions.SetSessionVarsReq request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Sessions.SetSessionUserResp> SetSessionUser(global::Sessions.SetSessionUserReq request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Sessions.ExpireSessionResp> ExpireSession(global::Sessions.ExpireSessionReq request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Sessions</summary>
    public class SessionsClient : ClientBase<SessionsClient>
    {
      /// <summary>Creates a new client for Sessions</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public SessionsClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Sessions that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public SessionsClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected SessionsClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected SessionsClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Sessions.StartSessionResp StartSession(global::Sessions.StartSessionReq request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return StartSession(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Sessions.StartSessionResp StartSession(global::Sessions.StartSessionReq request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StartSession, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Sessions.StartSessionResp> StartSessionAsync(global::Sessions.StartSessionReq request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return StartSessionAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Sessions.StartSessionResp> StartSessionAsync(global::Sessions.StartSessionReq request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StartSession, null, options, request);
      }
      public virtual global::Sessions.GetSessionResp GetSession(global::Sessions.GetSessionReq request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetSession(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Sessions.GetSessionResp GetSession(global::Sessions.GetSessionReq request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSession, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Sessions.GetSessionResp> GetSessionAsync(global::Sessions.GetSessionReq request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetSessionAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Sessions.GetSessionResp> GetSessionAsync(global::Sessions.GetSessionReq request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSession, null, options, request);
      }
      public virtual global::Sessions.SetSessionVarsResp SetSessionVars(global::Sessions.SetSessionVarsReq request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetSessionVars(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Sessions.SetSessionVarsResp SetSessionVars(global::Sessions.SetSessionVarsReq request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetSessionVars, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Sessions.SetSessionVarsResp> SetSessionVarsAsync(global::Sessions.SetSessionVarsReq request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetSessionVarsAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Sessions.SetSessionVarsResp> SetSessionVarsAsync(global::Sessions.SetSessionVarsReq request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetSessionVars, null, options, request);
      }
      public virtual global::Sessions.SetSessionUserResp SetSessionUser(global::Sessions.SetSessionUserReq request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetSessionUser(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Sessions.SetSessionUserResp SetSessionUser(global::Sessions.SetSessionUserReq request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetSessionUser, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Sessions.SetSessionUserResp> SetSessionUserAsync(global::Sessions.SetSessionUserReq request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetSessionUserAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Sessions.SetSessionUserResp> SetSessionUserAsync(global::Sessions.SetSessionUserReq request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetSessionUser, null, options, request);
      }
      public virtual global::Sessions.ExpireSessionResp ExpireSession(global::Sessions.ExpireSessionReq request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ExpireSession(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Sessions.ExpireSessionResp ExpireSession(global::Sessions.ExpireSessionReq request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ExpireSession, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Sessions.ExpireSessionResp> ExpireSessionAsync(global::Sessions.ExpireSessionReq request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ExpireSessionAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Sessions.ExpireSessionResp> ExpireSessionAsync(global::Sessions.ExpireSessionReq request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ExpireSession, null, options, request);
      }
      protected override SessionsClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SessionsClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(SessionsBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_StartSession, serviceImpl.StartSession)
          .AddMethod(__Method_GetSession, serviceImpl.GetSession)
          .AddMethod(__Method_SetSessionVars, serviceImpl.SetSessionVars)
          .AddMethod(__Method_SetSessionUser, serviceImpl.SetSessionUser)
          .AddMethod(__Method_ExpireSession, serviceImpl.ExpireSession).Build();
    }

  }
}
#endregion
